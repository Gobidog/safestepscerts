"""
SafeSteps V1 - Express User Workflow
Single-page workflow with all 5 steps visible for power users
"""
import streamlit as st
from datetime import datetime
import pandas as pd
import time
from pathlib import Path
import io

from utils.auth import get_current_user, log_activity
from utils.ui_components import (
    create_real_time_metric, create_progress_steps, show_toast,
    create_status_badge, COLORS
)
from utils.ui_helpers import (
    manage_navigation_state, manage_workflow_state, save_workflow_state
)
from utils.keyboard_shortcuts import (
    keyboard_manager, register_page_shortcuts, create_shortcut_hint
)
from utils.validators import SpreadsheetValidator
from utils.pdf_generator import PDFGenerator
from utils.storage import StorageManager
from utils.course_manager import CourseManager

# Initialize managers
storage = StorageManager()
course_manager = CourseManager(storage.local_path / "metadata")
validator = SpreadsheetValidator()
pdf_generator = PDFGenerator()

def render_express_workflow():
    """Render the express workflow - all 5 steps in one view"""
    
    # Initialize workflow state
    workflow_state = manage_workflow_state('express_workflow', {
        'current_step': 1,
        'completed_steps': [],
        'uploaded_file': None,
        'validation_results': None,
        'selected_template': None,
        'generation_results': None,
        'form_data': {}
    })
    
    # Register page-specific shortcuts
    page_shortcuts = {
        'alt+1': {'action': 'focus_step_1', 'description': 'Focus Upload Step', 'callback': lambda: focus_step(1)},
        'alt+2': {'action': 'focus_step_2', 'description': 'Focus Validation Step', 'callback': lambda: focus_step(2)},
        'alt+3': {'action': 'focus_step_3', 'description': 'Focus Template Step', 'callback': lambda: focus_step(3)},\n        'alt+4': {'action': 'focus_step_4', 'description': 'Focus Generation Step', 'callback': lambda: focus_step(4)},\n        'alt+5': {'action': 'focus_step_5', 'description': 'Focus Download Step', 'callback': lambda: focus_step(5)},\n        'ctrl+enter': {'action': 'auto_advance', 'description': 'Auto-advance to next step', 'callback': lambda: auto_advance_workflow()}\n    }\n    register_page_shortcuts(page_shortcuts)\n    \n    # Header\n    current_user = get_current_user()\n    col1, col2, col3 = st.columns([2, 1, 1])\n    \n    with col1:\n        st.title(\"⚡ Express Certificate Generator\")\n        st.caption(f\"Power user mode - All steps visible | User: {current_user.get('username', 'User')}\")\n    \n    with col2:\n        # Auto-save toggle\n        auto_save = st.toggle(\"💾 Auto-save\", value=True, help=\"Automatically save progress\")\n        if auto_save and st.session_state.get('workflow_changed', False):\n            save_workflow_state('express_workflow', workflow_state)\n            st.session_state['workflow_changed'] = False\n    \n    with col3:\n        # Express mode metrics\n        steps_completed = len(workflow_state['completed_steps'])\n        create_real_time_metric(\"Progress\", f\"{steps_completed}/5\", \"up\" if steps_completed > 0 else \"normal\", \"📊\")\n    \n    # Progress overview\n    steps = [\n        (\"Upload\", \"📤\", 1),\n        (\"Validate\", \"✅\", 2),\n        (\"Template\", \"📄\", 3),\n        (\"Generate\", \"🏆\", 4),\n        (\"Complete\", \"🎉\", 5)\n    ]\n    \n    current_step = workflow_state.get('current_step', 1)\n    create_progress_steps(steps, current_step)\n    \n    st.divider()\n    \n    # Express Mode Layout - All steps in columns\n    st.subheader(\"🚀 Express Mode - Complete Workflow\")\n    create_shortcut_hint(\"Alt+1-5\", \"Jump to specific steps\")\n    \n    # Main workflow columns\n    step_cols = st.columns(5)\n    \n    # Step 1: Upload\n    with step_cols[0]:\n        render_upload_step(workflow_state)\n    \n    # Step 2: Validation\n    with step_cols[1]:\n        render_validation_step(workflow_state)\n    \n    # Step 3: Template Selection\n    with step_cols[2]:\n        render_template_step(workflow_state)\n    \n    # Step 4: Generation\n    with step_cols[3]:\n        render_generation_step(workflow_state)\n    \n    # Step 5: Download/Complete\n    with step_cols[4]:\n        render_completion_step(workflow_state)\n    \n    # Status panel below steps\n    st.divider()\n    render_status_panel(workflow_state)\n    \n    # Advanced options (collapsible)\n    with st.expander(\"⚙️ Advanced Options\", expanded=False):\n        render_advanced_options(workflow_state)\n    \n    # Save workflow state if changed\n    if st.session_state.get('workflow_changed', False):\n        save_workflow_state('express_workflow', workflow_state)\n        st.session_state['workflow_changed'] = False\n\ndef render_upload_step(workflow_state):\n    \"\"\"Render upload step\"\"\"\n    step_active = workflow_state['current_step'] == 1\n    step_completed = 1 in workflow_state['completed_steps']\n    \n    # Step header\n    if step_completed:\n        st.success(\"✅ **1. Upload**\")\n    elif step_active:\n        st.info(\"🔄 **1. Upload**\")\n    else:\n        st.markdown(\"⭕ **1. Upload**\")\n    \n    # File uploader\n    uploaded_file = st.file_uploader(\n        \"Student Data\",\n        type=['csv', 'xlsx'],\n        key=\"express_upload\",\n        help=\"Upload CSV or Excel file with student information\",\n        label_visibility=\"collapsed\" if not step_active else \"visible\"\n    )\n    \n    if uploaded_file:\n        workflow_state['uploaded_file'] = uploaded_file\n        workflow_state['form_data']['filename'] = uploaded_file.name\n        workflow_state['form_data']['file_size'] = uploaded_file.size\n        \n        # File info\n        st.success(f\"📄 {uploaded_file.name}\")\n        st.caption(f\"Size: {uploaded_file.size:,} bytes\")\n        \n        # Mark step completed\n        if 1 not in workflow_state['completed_steps']:\n            workflow_state['completed_steps'].append(1)\n            workflow_state['current_step'] = 2\n            st.session_state['workflow_changed'] = True\n            show_toast(\"Upload completed!\", \"success\")\n    \n    # Quick upload tips\n    if step_active:\n        st.caption(\"💡 Supported: CSV, Excel files\")\n        st.caption(\"📋 Required columns: name, email\")\n\ndef render_validation_step(workflow_state):\n    \"\"\"Render validation step\"\"\"\n    step_active = workflow_state['current_step'] == 2\n    step_completed = 2 in workflow_state['completed_steps']\n    has_file = workflow_state.get('uploaded_file') is not None\n    \n    # Step header\n    if step_completed:\n        st.success(\"✅ **2. Validate**\")\n    elif step_active and has_file:\n        st.info(\"🔄 **2. Validate**\")\n    elif has_file:\n        st.warning(\"⏳ **2. Validate**\")\n    else:\n        st.markdown(\"⭕ **2. Validate**\")\n    \n    if has_file:\n        # Auto-validation for express mode\n        if not workflow_state.get('validation_results'):\n            with st.spinner(\"Auto-validating...\"):\n                time.sleep(0.5)  # Simulate validation\n                \n                # Simulate validation results\n                validation_results = {\n                    'valid': True,\n                    'row_count': 25,\n                    'column_count': 5,\n                    'required_columns': ['name', 'email'],\n                    'errors': [],\n                    'warnings': []\n                }\n                \n                workflow_state['validation_results'] = validation_results\n                st.session_state['workflow_changed'] = True\n        \n        results = workflow_state['validation_results']\n        \n        if results['valid']:\n            st.success(\"✅ Valid Data\")\n            st.metric(\"Rows\", results['row_count'])\n            st.metric(\"Columns\", results['column_count'])\n            \n            # Mark step completed\n            if 2 not in workflow_state['completed_steps']:\n                workflow_state['completed_steps'].append(2)\n                workflow_state['current_step'] = 3\n                st.session_state['workflow_changed'] = True\n                show_toast(\"Validation passed!\", \"success\")\n        else:\n            st.error(\"❌ Invalid Data\")\n            for error in results.get('errors', []):\n                st.error(f\"• {error}\")\n    else:\n        st.text(\"Waiting for file...\")\n        st.caption(\"Upload file first\")\n\ndef render_template_step(workflow_state):\n    \"\"\"Render template selection step\"\"\"\n    step_active = workflow_state['current_step'] == 3\n    step_completed = 3 in workflow_state['completed_steps']\n    validation_passed = workflow_state.get('validation_results', {}).get('valid', False)\n    \n    # Step header\n    if step_completed:\n        st.success(\"✅ **3. Template**\")\n    elif step_active and validation_passed:\n        st.info(\"🔄 **3. Template**\")\n    elif validation_passed:\n        st.warning(\"⏳ **3. Template**\")\n    else:\n        st.markdown(\"⭕ **3. Template**\")\n    \n    if validation_passed:\n        # Template selection\n        courses = course_manager.list_courses()\n        template_options = [\"Digital Citizenship\", \"Safety Training\", \"Compliance Course\"]\n        \n        # Add courses to options\n        if courses:\n            for course in courses[:3]:  # Limit to first 3\n                template_options.append(course.name)\n        \n        selected_template = st.selectbox(\n            \"Template\",\n            template_options,\n            key=\"express_template\",\n            label_visibility=\"collapsed\"\n        )\n        \n        if selected_template:\n            workflow_state['selected_template'] = selected_template\n            workflow_state['form_data']['template'] = selected_template\n            \n            st.success(f\"📄 {selected_template}\")\n            \n            # Quick preview\n            st.caption(\"🔍 Template ready\")\n            \n            # Mark step completed\n            if 3 not in workflow_state['completed_steps']:\n                workflow_state['completed_steps'].append(3)\n                workflow_state['current_step'] = 4\n                st.session_state['workflow_changed'] = True\n                show_toast(\"Template selected!\", \"success\")\n    else:\n        st.text(\"Validation required\")\n        st.caption(\"Complete validation first\")\n\ndef render_generation_step(workflow_state):\n    \"\"\"Render certificate generation step\"\"\"\n    step_active = workflow_state['current_step'] == 4\n    step_completed = 4 in workflow_state['completed_steps']\n    template_selected = workflow_state.get('selected_template') is not None\n    \n    # Step header\n    if step_completed:\n        st.success(\"✅ **4. Generate**\")\n    elif step_active and template_selected:\n        st.info(\"🔄 **4. Generate**\")\n    elif template_selected:\n        st.warning(\"⏳ **4. Generate**\")\n    else:\n        st.markdown(\"⭕ **4. Generate**\")\n    \n    if template_selected:\n        # Generation button\n        if st.button(\n            \"🏆 Generate\",\n            key=\"express_generate\",\n            use_container_width=True,\n            type=\"primary\" if step_active else \"secondary\",\n            disabled=not step_active\n        ):\n            # Generation process with progress\n            progress_container = st.empty()\n            progress_bar = progress_container.progress(0)\n            \n            generation_steps = [\n                \"Processing data...\",\n                \"Loading template...\",\n                \"Generating certificates...\",\n                \"Creating ZIP file...\",\n                \"Finalizing...\"\n            ]\n            \n            for i, step_text in enumerate(generation_steps):\n                progress_bar.progress((i + 1) * 20, text=step_text)\n                time.sleep(0.3)\n            \n            # Simulate generation results\n            generation_results = {\n                'success': True,\n                'certificates_generated': workflow_state.get('validation_results', {}).get('row_count', 25),\n                'file_size': '2.3 MB',\n                'generation_time': '0.8 seconds',\n                'download_url': 'dummy_certificates.zip'\n            }\n            \n            workflow_state['generation_results'] = generation_results\n            \n            progress_container.empty()\n            \n            # Mark step completed\n            if 4 not in workflow_state['completed_steps']:\n                workflow_state['completed_steps'].append(4)\n                workflow_state['current_step'] = 5\n                st.session_state['workflow_changed'] = True\n                show_toast(\"Generation completed!\", \"success\")\n                st.rerun()\n        \n        # Show generation status\n        if workflow_state.get('generation_results'):\n            results = workflow_state['generation_results']\n            st.success(\"✅ Generated!\")\n            st.metric(\"Certificates\", results['certificates_generated'])\n            st.caption(f\"📦 {results['file_size']}\")\n    else:\n        st.text(\"Template required\")\n        st.caption(\"Select template first\")\n\ndef render_completion_step(workflow_state):\n    \"\"\"Render completion/download step\"\"\"\n    step_active = workflow_state['current_step'] == 5\n    step_completed = 5 in workflow_state['completed_steps']\n    generation_done = workflow_state.get('generation_results') is not None\n    \n    # Step header\n    if step_completed:\n        st.success(\"✅ **5. Complete**\")\n    elif step_active and generation_done:\n        st.info(\"🔄 **5. Complete**\")\n    elif generation_done:\n        st.warning(\"⏳ **5. Complete**\")\n    else:\n        st.markdown(\"⭕ **5. Complete**\")\n    \n    if generation_done:\n        results = workflow_state['generation_results']\n        \n        # Download button\n        if st.download_button(\n            \"📥 Download\",\n            data=b\"dummy certificate data\",  # In real app, this would be actual ZIP data\n            file_name=\"certificates.zip\",\n            mime=\"application/zip\",\n            use_container_width=True,\n            type=\"primary\" if step_active else \"secondary\"\n        ):\n            # Mark step completed\n            if 5 not in workflow_state['completed_steps']:\n                workflow_state['completed_steps'].append(5)\n                st.session_state['workflow_changed'] = True\n                show_toast(\"Download started!\", \"success\")\n                \n                # Log activity\n                current_user = get_current_user()\n                log_activity(\n                    current_user.get('username', 'user'),\n                    'certificate_download',\n                    {'count': results['certificates_generated'], 'template': workflow_state['selected_template']}\n                )\n        \n        # Completion stats\n        st.success(\"🎉 Ready!\")\n        st.metric(\"Generated\", results['certificates_generated'])\n        st.caption(f\"⚡ {results['generation_time']}\")\n        \n        # Quick actions\n        col1, col2 = st.columns(2)\n        with col1:\n            if st.button(\"🔄 New Batch\", use_container_width=True):\n                reset_workflow()\n        with col2:\n            if st.button(\"📧 Email\", use_container_width=True):\n                st.success(\"Email feature coming soon!\")\n    else:\n        st.text(\"Generation required\")\n        st.caption(\"Generate certificates first\")\n\ndef render_status_panel(workflow_state):\n    \"\"\"Render workflow status panel\"\"\"\n    st.subheader(\"📊 Workflow Status\")\n    \n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        st.metric(\"Current Step\", f\"{workflow_state['current_step']}/5\")\n    \n    with col2:\n        completed_count = len(workflow_state['completed_steps'])\n        st.metric(\"Completed\", f\"{completed_count}/5\")\n    \n    with col3:\n        if workflow_state.get('uploaded_file'):\n            st.metric(\"File\", workflow_state['uploaded_file'].name[:15] + \"...\")\n        else:\n            st.metric(\"File\", \"None\")\n    \n    with col4:\n        if workflow_state.get('selected_template'):\n            st.metric(\"Template\", workflow_state['selected_template'][:15] + \"...\")\n        else:\n            st.metric(\"Template\", \"None\")\n    \n    # Progress visualization\n    progress_percentage = (len(workflow_state['completed_steps']) / 5) * 100\n    st.progress(progress_percentage / 100, text=f\"Overall Progress: {progress_percentage:.0f}%\")\n    \n    # Quick actions\n    action_cols = st.columns(4)\n    \n    with action_cols[0]:\n        if st.button(\"💾 Save Progress\", use_container_width=True):\n            save_workflow_state('express_workflow', workflow_state)\n            show_toast(\"Progress saved!\", \"success\")\n    \n    with action_cols[1]:\n        if st.button(\"🔄 Reset Workflow\", use_container_width=True):\n            reset_workflow()\n    \n    with action_cols[2]:\n        if st.button(\"⚡ Auto-Advance\", use_container_width=True, disabled=workflow_state['current_step'] >= 5):\n            auto_advance_workflow()\n    \n    with action_cols[3]:\n        if st.button(\"📋 Workflow Help\", use_container_width=True):\n            st.session_state['show_workflow_help'] = True\n    \n    # Workflow help modal\n    if st.session_state.get('show_workflow_help', False):\n        with st.container(border=True):\n            st.subheader(\"📋 Express Workflow Help\")\n            st.markdown(\"\"\"\n            **Express Mode Features:**\n            - All 5 steps visible at once\n            - Auto-validation and auto-advancement\n            - Keyboard shortcuts (Alt+1-5)\n            - Real-time progress tracking\n            - Auto-save functionality\n            \n            **Workflow Steps:**\n            1. **Upload**: Select CSV/Excel file with student data\n            2. **Validate**: Automatic data validation\n            3. **Template**: Choose certificate template\n            4. **Generate**: Create certificates with one click\n            5. **Download**: Get your certificate ZIP file\n            \n            **Keyboard Shortcuts:**\n            - `Alt+1-5`: Jump to specific steps\n            - `Ctrl+Enter`: Auto-advance to next step\n            - `Ctrl+S`: Save progress\n            \"\"\")\n            \n            if st.button(\"Close Help\", type=\"primary\", use_container_width=True):\n                st.session_state['show_workflow_help'] = False\n                st.rerun()\n\ndef render_advanced_options(workflow_state):\n    \"\"\"Render advanced workflow options\"\"\"\n    \n    col1, col2 = st.columns(2)\n    \n    with col1:\n        st.subheader(\"🎛️ Generation Options\")\n        \n        # Certificate customization\n        custom_message = st.text_area(\n            \"Custom Message\",\n            placeholder=\"Add a personal message to certificates...\",\n            help=\"Optional message to include on certificates\"\n        )\n        \n        # Date options\n        issue_date = st.date_input(\n            \"Issue Date\",\n            value=datetime.now().date(),\n            help=\"Date to appear on certificates\"\n        )\n        \n        # Batch options\n        batch_name = st.text_input(\n            \"Batch Name\",\n            placeholder=\"e.g., Q1 2024 Safety Training\",\n            help=\"Name for this certificate batch\"\n        )\n    \n    with col2:\n        st.subheader(\"📧 Delivery Options\")\n        \n        # Email options\n        auto_email = st.checkbox(\n            \"Auto-send via Email\",\n            help=\"Automatically email certificates to recipients\"\n        )\n        \n        if auto_email:\n            email_subject = st.text_input(\n                \"Email Subject\",\n                value=\"Your SafeSteps Certificate\",\n                help=\"Subject line for certificate emails\"\n            )\n            \n            email_template = st.selectbox(\n                \"Email Template\",\n                [\"Standard\", \"Formal\", \"Congratulatory\"],\n                help=\"Choose email template style\"\n            )\n        \n        # Export options\n        export_format = st.selectbox(\n            \"Export Format\",\n            [\"PDF (Recommended)\", \"PNG Image\", \"Both PDF and PNG\"],\n            help=\"Choose certificate format\"\n        )\n    \n    # Save advanced options to workflow state\n    workflow_state['form_data'].update({\n        'custom_message': custom_message,\n        'issue_date': issue_date.isoformat() if issue_date else None,\n        'batch_name': batch_name,\n        'auto_email': auto_email,\n        'email_subject': email_subject if auto_email else None,\n        'email_template': email_template if auto_email else None,\n        'export_format': export_format\n    })\n\ndef focus_step(step_number):\n    \"\"\"Focus on a specific workflow step\"\"\"\n    workflow_state = manage_workflow_state('express_workflow')\n    workflow_state['current_step'] = step_number\n    st.session_state['workflow_changed'] = True\n    show_toast(f\"Focused on step {step_number}\", \"info\")\n    st.rerun()\n\ndef auto_advance_workflow():\n    \"\"\"Auto-advance workflow to next available step\"\"\"\n    workflow_state = manage_workflow_state('express_workflow')\n    current_step = workflow_state['current_step']\n    \n    if current_step < 5:\n        workflow_state['current_step'] = current_step + 1\n        st.session_state['workflow_changed'] = True\n        show_toast(f\"Advanced to step {current_step + 1}\", \"success\")\n        st.rerun()\n    else:\n        show_toast(\"Workflow already complete!\", \"info\")\n\ndef reset_workflow():\n    \"\"\"Reset the workflow to start over\"\"\"\n    # Clear workflow state\n    st.session_state['workflow_express_workflow'] = {\n        'current_step': 1,\n        'completed_steps': [],\n        'uploaded_file': None,\n        'validation_results': None,\n        'selected_template': None,\n        'generation_results': None,\n        'form_data': {}\n    }\n    \n    # Clear related session state\n    keys_to_clear = [\n        'express_upload',\n        'express_template',\n        'express_generate'\n    ]\n    \n    for key in keys_to_clear:\n        if key in st.session_state:\n            del st.session_state[key]\n    \n    st.session_state['workflow_changed'] = True\n    show_toast(\"Workflow reset!\", \"success\")\n    st.rerun()\n\n# Main entry point\nif __name__ == \"__main__\":\n    render_express_workflow()"